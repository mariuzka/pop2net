{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Real Data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "import pop2net as p2n\n",
    "from pop2net.pop_maker import PopMaker\n",
    "import pop2net.utils as utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pequiv = pd.read_stata(\"C:/01-main/03-ac135963/Projekte/p2n/examples/data/pequiv.dta\")\n",
    "df_pequiv = df_pequiv.rename(columns={\"d11101\": \"age\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df_pequiv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Marius\\AppData\\Local\\Temp\\ipykernel_8612\\4210135427.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df.loc[:, \"age\"] = pd.to_numeric(df[\"age\"], errors=\"coerce\")\n",
      "C:\\Users\\Marius\\AppData\\Local\\Temp\\ipykernel_8612\\4210135427.py:2: DeprecationWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`\n",
      "  df.loc[:, \"age\"] = pd.to_numeric(df[\"age\"], errors=\"coerce\")\n",
      "C:\\Users\\Marius\\AppData\\Local\\Temp\\ipykernel_8612\\4210135427.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df.dropna(inplace=True)\n"
     ]
    }
   ],
   "source": [
    "df = df.loc[df[\"syear\"] == 2018,]\n",
    "df.loc[:, \"age\"] = pd.to_numeric(df[\"age\"], errors=\"coerce\")\n",
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Agent(p2n.Agent):\n",
    "    pass\n",
    "\n",
    "\n",
    "class Home(p2n.Location):\n",
    "    def group(self, agent):\n",
    "        return agent.hid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Model(p2n.Model):\n",
    "    def setup(self):\n",
    "        self.pop_maker = PopMaker(model=self)\n",
    "        self.agents, self.locations = self.pop_maker.make(\n",
    "            df=df,\n",
    "            n_agents=self.p.n_agents,\n",
    "            sample_level=\"hid\",\n",
    "            agent_class=Agent,\n",
    "            location_classes=[Home],\n",
    "        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Completed: 1 steps\n",
      "Run time: 0:00:52.207053\n",
      "Simulation finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DataDict {\n",
       "'info': Dictionary with 9 keys\n",
       "'parameters': \n",
       "    'constants': Dictionary with 2 keys\n",
       "'reporters': DataFrame with 1 variable and 1 row\n",
       "}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parameters = {\n",
    "    \"steps\": 1,\n",
    "    \"n_agents\": 10000,\n",
    "}\n",
    "model = Model(parameters=parameters)\n",
    "model.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>5</th>\n",
       "      <th>10</th>\n",
       "      <th>15</th>\n",
       "      <th>20</th>\n",
       "      <th>25</th>\n",
       "      <th>30</th>\n",
       "      <th>35</th>\n",
       "      <th>40</th>\n",
       "      <th>45</th>\n",
       "      <th>50</th>\n",
       "      <th>55</th>\n",
       "      <th>60</th>\n",
       "      <th>65</th>\n",
       "      <th>70</th>\n",
       "      <th>75</th>\n",
       "      <th>80</th>\n",
       "      <th>85</th>\n",
       "      <th>90</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.0008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0013</td>\n",
       "      <td>0.0026</td>\n",
       "      <td>0.0004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0007</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0006</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0006</td>\n",
       "      <td>0.0006</td>\n",
       "      <td>0.0007</td>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0006</td>\n",
       "      <td>0.0031</td>\n",
       "      <td>0.0072</td>\n",
       "      <td>0.0013</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.0007</td>\n",
       "      <td>0.0047</td>\n",
       "      <td>0.0158</td>\n",
       "      <td>0.0031</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0007</td>\n",
       "      <td>0.0016</td>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.0013</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0012</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0016</td>\n",
       "      <td>0.0020</td>\n",
       "      <td>0.0070</td>\n",
       "      <td>0.0140</td>\n",
       "      <td>0.0047</td>\n",
       "      <td>0.0006</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.0008</td>\n",
       "      <td>0.0009</td>\n",
       "      <td>0.0007</td>\n",
       "      <td>0.0024</td>\n",
       "      <td>0.0021</td>\n",
       "      <td>0.0009</td>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.0007</td>\n",
       "      <td>0.0039</td>\n",
       "      <td>0.0085</td>\n",
       "      <td>0.0218</td>\n",
       "      <td>0.0070</td>\n",
       "      <td>0.0007</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>0.0006</td>\n",
       "      <td>0.0008</td>\n",
       "      <td>0.0013</td>\n",
       "      <td>0.0033</td>\n",
       "      <td>0.0074</td>\n",
       "      <td>0.0033</td>\n",
       "      <td>0.0017</td>\n",
       "      <td>0.0030</td>\n",
       "      <td>0.0006</td>\n",
       "      <td>0.0010</td>\n",
       "      <td>0.0023</td>\n",
       "      <td>0.0081</td>\n",
       "      <td>0.0308</td>\n",
       "      <td>0.0085</td>\n",
       "      <td>0.0020</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>0.0009</td>\n",
       "      <td>0.0026</td>\n",
       "      <td>0.0065</td>\n",
       "      <td>0.0140</td>\n",
       "      <td>0.0189</td>\n",
       "      <td>0.0105</td>\n",
       "      <td>0.0031</td>\n",
       "      <td>0.0012</td>\n",
       "      <td>0.0010</td>\n",
       "      <td>0.0041</td>\n",
       "      <td>0.0117</td>\n",
       "      <td>0.0276</td>\n",
       "      <td>0.0081</td>\n",
       "      <td>0.0039</td>\n",
       "      <td>0.0016</td>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.0007</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>0.0025</td>\n",
       "      <td>0.0086</td>\n",
       "      <td>0.0276</td>\n",
       "      <td>0.0473</td>\n",
       "      <td>0.0381</td>\n",
       "      <td>0.0066</td>\n",
       "      <td>0.0016</td>\n",
       "      <td>0.0023</td>\n",
       "      <td>0.0055</td>\n",
       "      <td>0.0166</td>\n",
       "      <td>0.0434</td>\n",
       "      <td>0.0117</td>\n",
       "      <td>0.0023</td>\n",
       "      <td>0.0007</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0006</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>0.0084</td>\n",
       "      <td>0.0248</td>\n",
       "      <td>0.0473</td>\n",
       "      <td>0.0530</td>\n",
       "      <td>0.0224</td>\n",
       "      <td>0.0051</td>\n",
       "      <td>0.0018</td>\n",
       "      <td>0.0061</td>\n",
       "      <td>0.0145</td>\n",
       "      <td>0.0392</td>\n",
       "      <td>0.0166</td>\n",
       "      <td>0.0041</td>\n",
       "      <td>0.0010</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0006</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>0.0203</td>\n",
       "      <td>0.0491</td>\n",
       "      <td>0.0623</td>\n",
       "      <td>0.0378</td>\n",
       "      <td>0.0104</td>\n",
       "      <td>0.0016</td>\n",
       "      <td>0.0047</td>\n",
       "      <td>0.0153</td>\n",
       "      <td>0.0368</td>\n",
       "      <td>0.0145</td>\n",
       "      <td>0.0055</td>\n",
       "      <td>0.0010</td>\n",
       "      <td>0.0006</td>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.0012</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>0.0367</td>\n",
       "      <td>0.0562</td>\n",
       "      <td>0.0509</td>\n",
       "      <td>0.0173</td>\n",
       "      <td>0.0027</td>\n",
       "      <td>0.0029</td>\n",
       "      <td>0.0143</td>\n",
       "      <td>0.0378</td>\n",
       "      <td>0.0153</td>\n",
       "      <td>0.0061</td>\n",
       "      <td>0.0023</td>\n",
       "      <td>0.0012</td>\n",
       "      <td>0.0030</td>\n",
       "      <td>0.0009</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0006</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>0.0403</td>\n",
       "      <td>0.0358</td>\n",
       "      <td>0.0200</td>\n",
       "      <td>0.0027</td>\n",
       "      <td>0.0031</td>\n",
       "      <td>0.0098</td>\n",
       "      <td>0.0394</td>\n",
       "      <td>0.0143</td>\n",
       "      <td>0.0047</td>\n",
       "      <td>0.0018</td>\n",
       "      <td>0.0016</td>\n",
       "      <td>0.0031</td>\n",
       "      <td>0.0017</td>\n",
       "      <td>0.0021</td>\n",
       "      <td>0.0013</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0.0262</td>\n",
       "      <td>0.0101</td>\n",
       "      <td>0.0035</td>\n",
       "      <td>0.0061</td>\n",
       "      <td>0.0130</td>\n",
       "      <td>0.0322</td>\n",
       "      <td>0.0098</td>\n",
       "      <td>0.0029</td>\n",
       "      <td>0.0016</td>\n",
       "      <td>0.0051</td>\n",
       "      <td>0.0066</td>\n",
       "      <td>0.0105</td>\n",
       "      <td>0.0033</td>\n",
       "      <td>0.0024</td>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0.0090</td>\n",
       "      <td>0.0055</td>\n",
       "      <td>0.0146</td>\n",
       "      <td>0.0325</td>\n",
       "      <td>0.0430</td>\n",
       "      <td>0.0130</td>\n",
       "      <td>0.0031</td>\n",
       "      <td>0.0027</td>\n",
       "      <td>0.0104</td>\n",
       "      <td>0.0224</td>\n",
       "      <td>0.0381</td>\n",
       "      <td>0.0189</td>\n",
       "      <td>0.0074</td>\n",
       "      <td>0.0007</td>\n",
       "      <td>0.0016</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0004</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.0112</td>\n",
       "      <td>0.0253</td>\n",
       "      <td>0.0583</td>\n",
       "      <td>0.0790</td>\n",
       "      <td>0.0325</td>\n",
       "      <td>0.0061</td>\n",
       "      <td>0.0027</td>\n",
       "      <td>0.0173</td>\n",
       "      <td>0.0378</td>\n",
       "      <td>0.0530</td>\n",
       "      <td>0.0473</td>\n",
       "      <td>0.0140</td>\n",
       "      <td>0.0033</td>\n",
       "      <td>0.0009</td>\n",
       "      <td>0.0007</td>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.0007</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.0307</td>\n",
       "      <td>0.0695</td>\n",
       "      <td>0.0874</td>\n",
       "      <td>0.0583</td>\n",
       "      <td>0.0146</td>\n",
       "      <td>0.0035</td>\n",
       "      <td>0.0200</td>\n",
       "      <td>0.0509</td>\n",
       "      <td>0.0623</td>\n",
       "      <td>0.0473</td>\n",
       "      <td>0.0276</td>\n",
       "      <td>0.0065</td>\n",
       "      <td>0.0013</td>\n",
       "      <td>0.0008</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0003</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.0486</td>\n",
       "      <td>0.0742</td>\n",
       "      <td>0.0695</td>\n",
       "      <td>0.0253</td>\n",
       "      <td>0.0055</td>\n",
       "      <td>0.0101</td>\n",
       "      <td>0.0358</td>\n",
       "      <td>0.0562</td>\n",
       "      <td>0.0491</td>\n",
       "      <td>0.0248</td>\n",
       "      <td>0.0086</td>\n",
       "      <td>0.0026</td>\n",
       "      <td>0.0008</td>\n",
       "      <td>0.0005</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0466</td>\n",
       "      <td>0.0486</td>\n",
       "      <td>0.0307</td>\n",
       "      <td>0.0112</td>\n",
       "      <td>0.0090</td>\n",
       "      <td>0.0262</td>\n",
       "      <td>0.0403</td>\n",
       "      <td>0.0367</td>\n",
       "      <td>0.0203</td>\n",
       "      <td>0.0084</td>\n",
       "      <td>0.0025</td>\n",
       "      <td>0.0009</td>\n",
       "      <td>0.0006</td>\n",
       "      <td>0.0002</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        0       5       10      15      20      25      30      35      40  \\\n",
       "90  0.0000  0.0002  0.0001  0.0002  0.0000  0.0000  0.0000  0.0001  0.0001   \n",
       "85  0.0001  0.0000  0.0002  0.0003  0.0000  0.0000  0.0000  0.0001  0.0000   \n",
       "80  0.0001  0.0001  0.0003  0.0007  0.0004  0.0003  0.0002  0.0006  0.0001   \n",
       "75  0.0001  0.0002  0.0002  0.0005  0.0003  0.0000  0.0002  0.0003  0.0004   \n",
       "70  0.0000  0.0000  0.0000  0.0007  0.0016  0.0005  0.0013  0.0003  0.0012   \n",
       "65  0.0002  0.0005  0.0008  0.0009  0.0007  0.0024  0.0021  0.0009  0.0005   \n",
       "60  0.0006  0.0008  0.0013  0.0033  0.0074  0.0033  0.0017  0.0030  0.0006   \n",
       "55  0.0009  0.0026  0.0065  0.0140  0.0189  0.0105  0.0031  0.0012  0.0010   \n",
       "50  0.0025  0.0086  0.0276  0.0473  0.0381  0.0066  0.0016  0.0023  0.0055   \n",
       "45  0.0084  0.0248  0.0473  0.0530  0.0224  0.0051  0.0018  0.0061  0.0145   \n",
       "40  0.0203  0.0491  0.0623  0.0378  0.0104  0.0016  0.0047  0.0153  0.0368   \n",
       "35  0.0367  0.0562  0.0509  0.0173  0.0027  0.0029  0.0143  0.0378  0.0153   \n",
       "30  0.0403  0.0358  0.0200  0.0027  0.0031  0.0098  0.0394  0.0143  0.0047   \n",
       "25  0.0262  0.0101  0.0035  0.0061  0.0130  0.0322  0.0098  0.0029  0.0016   \n",
       "20  0.0090  0.0055  0.0146  0.0325  0.0430  0.0130  0.0031  0.0027  0.0104   \n",
       "15  0.0112  0.0253  0.0583  0.0790  0.0325  0.0061  0.0027  0.0173  0.0378   \n",
       "10  0.0307  0.0695  0.0874  0.0583  0.0146  0.0035  0.0200  0.0509  0.0623   \n",
       "5   0.0486  0.0742  0.0695  0.0253  0.0055  0.0101  0.0358  0.0562  0.0491   \n",
       "0   0.0466  0.0486  0.0307  0.0112  0.0090  0.0262  0.0403  0.0367  0.0203   \n",
       "\n",
       "        45      50      55      60      65      70      75      80      85  \\\n",
       "90  0.0002  0.0001  0.0000  0.0000  0.0001  0.0001  0.0001  0.0000  0.0004   \n",
       "85  0.0003  0.0002  0.0000  0.0000  0.0000  0.0000  0.0000  0.0013  0.0026   \n",
       "80  0.0006  0.0006  0.0007  0.0005  0.0003  0.0006  0.0031  0.0072  0.0013   \n",
       "75  0.0003  0.0001  0.0005  0.0004  0.0007  0.0047  0.0158  0.0031  0.0000   \n",
       "70  0.0003  0.0003  0.0016  0.0020  0.0070  0.0140  0.0047  0.0006  0.0000   \n",
       "65  0.0004  0.0007  0.0039  0.0085  0.0218  0.0070  0.0007  0.0003  0.0000   \n",
       "60  0.0010  0.0023  0.0081  0.0308  0.0085  0.0020  0.0004  0.0005  0.0000   \n",
       "55  0.0041  0.0117  0.0276  0.0081  0.0039  0.0016  0.0005  0.0007  0.0000   \n",
       "50  0.0166  0.0434  0.0117  0.0023  0.0007  0.0003  0.0001  0.0006  0.0002   \n",
       "45  0.0392  0.0166  0.0041  0.0010  0.0004  0.0003  0.0003  0.0006  0.0003   \n",
       "40  0.0145  0.0055  0.0010  0.0006  0.0005  0.0012  0.0004  0.0001  0.0000   \n",
       "35  0.0061  0.0023  0.0012  0.0030  0.0009  0.0003  0.0003  0.0006  0.0001   \n",
       "30  0.0018  0.0016  0.0031  0.0017  0.0021  0.0013  0.0002  0.0002  0.0000   \n",
       "25  0.0051  0.0066  0.0105  0.0033  0.0024  0.0005  0.0000  0.0003  0.0000   \n",
       "20  0.0224  0.0381  0.0189  0.0074  0.0007  0.0016  0.0003  0.0004  0.0000   \n",
       "15  0.0530  0.0473  0.0140  0.0033  0.0009  0.0007  0.0005  0.0007  0.0003   \n",
       "10  0.0473  0.0276  0.0065  0.0013  0.0008  0.0000  0.0002  0.0003  0.0002   \n",
       "5   0.0248  0.0086  0.0026  0.0008  0.0005  0.0000  0.0002  0.0001  0.0000   \n",
       "0   0.0084  0.0025  0.0009  0.0006  0.0002  0.0000  0.0001  0.0001  0.0001   \n",
       "\n",
       "        90  \n",
       "90  0.0008  \n",
       "85  0.0004  \n",
       "80  0.0000  \n",
       "75  0.0001  \n",
       "70  0.0001  \n",
       "65  0.0001  \n",
       "60  0.0000  \n",
       "55  0.0000  \n",
       "50  0.0001  \n",
       "45  0.0002  \n",
       "40  0.0001  \n",
       "35  0.0001  \n",
       "30  0.0000  \n",
       "25  0.0000  \n",
       "20  0.0000  \n",
       "15  0.0002  \n",
       "10  0.0001  \n",
       "5   0.0002  \n",
       "0   0.0000  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for agent in model.agents:\n",
    "    agent.age_5 = utils.group_it(\n",
    "        value=agent.age,\n",
    "        start=0,\n",
    "        step=5,\n",
    "        n_steps=20,\n",
    "        return_value=\"lower_bound\",\n",
    "    )\n",
    "\n",
    "utils.create_contact_matrix(agents=model.agents, attr=\"age_5\", plot=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
