{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime as dt\n",
    "import random\n",
    "\n",
    "import numpy as np\n",
    "import popy\n",
    "from popy.data_fakers.soep import soep_faker\n",
    "from popy.pop_maker import PopMaker\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Agent(popy.Agent):\n",
    "    def __init__(self, model, *args, **kwargs) -> None:\n",
    "        super().__init__(model, *args, **kwargs)\n",
    "\n",
    "        self.wealth = 1\n",
    "\n",
    "    def wealth_transfer(self):\n",
    "        if self.wealth > 0:\n",
    "            if len(self.neighbors()) > 0:\n",
    "                partner = random.choice(self.neighbors())\n",
    "                partner.wealth += 1\n",
    "                self.wealth -= 1\n",
    "\n",
    "\n",
    "class Home(popy.Location):\n",
    "    def group(self, agent):\n",
    "        return agent.hid\n",
    "\n",
    "\n",
    "class School(popy.Location):\n",
    "    def group(self, agent) -> object:\n",
    "        return agent.age\n",
    "\n",
    "    def join(self, agent) -> object:\n",
    "        return 5 < agent.age < 20\n",
    "\n",
    "\n",
    "def gini(x):\n",
    "    \"\"\"Calculate Gini Coefficient\"\"\"\n",
    "    # By Warren Weckesser https://stackoverflow.com/a/39513799\n",
    "\n",
    "    x = np.array(x)\n",
    "    mad = np.abs(np.subtract.outer(x, x)).mean()  # Mean absolute difference\n",
    "    rmad = mad / np.mean(x)  # Relative mean absolute difference\n",
    "    return 0.5 * rmad\n",
    "\n",
    "\n",
    "class Model(popy.Model):\n",
    "    def setup(self):\n",
    "        self.date = dt.date(2022, 1, 1)\n",
    "        df_soep = soep_faker.soep(size=self.p.n_agents)\n",
    "        self.pop_maker = PopMaker(model=self)\n",
    "        self.agents, self.locations = self.pop_maker.make(\n",
    "            df=df_soep,\n",
    "            agent_class=Agent,\n",
    "            location_classes=[Home, School],\n",
    "        )\n",
    "\n",
    "    def step(self):\n",
    "        self.agents.wealth_transfer()\n",
    "\n",
    "    def update(self):\n",
    "        self.record(\"Gini Coefficient\", gini(self.agents.wealth))\n",
    "\n",
    "    def end(self):\n",
    "        self.agents.record(\"wealth\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Completed: 100 steps\n",
      "Run time: 0:00:01.567968\n",
      "Simulation finished\n"
     ]
    }
   ],
   "source": [
    "parameters = {\n",
    "    \"n_agents\": 1000,\n",
    "    \"steps\": 100,\n",
    "    \"seed\": 42,\n",
    "}\n",
    "\n",
    "model = Model(parameters)\n",
    "results = model.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: ylabel='Count'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(\n",
    "    data=results.variables.Agent,\n",
    "    binwidth=1,\n",
    ")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
