name: Release New Version

on:
  workflow_dispatch:

jobs:
  test:
    uses: ./.github/workflows/tox.yml
  build_docs:
    uses: ./.github/workflows/docs_pages.yml
  release:
    name: Release
    needs: [test, build_docs]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      # Set up environment
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Enable Poetry
        run: pipx install poetry
      # Pull to refresh and build
      - name: Build Project
        run: poetry build
      # check version for tag
      - name: Check Version
        id: check-version
        run: |
          echo version=$(poetry version --short) >> $GITHUB_OUTPUT
      - name: Check Prerelease
        id: check-prerelease
        run: |
          if [[ ${{ steps.check-version.outputs.version }} =~ [a-zA-Z] ]]; then echo "prerelease=true" >> "$GITHUB_OUTPUT"; else echo "prerelease=false" >> "$GITHUB_OUTPUT"; fi
          echo "IS PRERELEASE $GITHUB_OUTPUT"
      # Actually release
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.check-version.outputs.version }}
          draft: false
          generateReleaseNotes: true
          prerelease: ${{ steps.check-version.outputs.prerelease }}
      - name: Publish to PyPI
        if: steps.check-prerelease.outputs.prerelease == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
      # merge main to dev to have up-to-date version number there
      - name: Merge main to dev
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: main
          target_branch: dev
          message: merge main to dev
          github_token: ${{ secrets.GITHUB_TOKEN }}
